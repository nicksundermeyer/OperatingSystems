/* Define exceptions used in MemorySubsystem project.
 * 
 * All exception classes support the what() method, which returns a C string
 * describing the exception.
 * 
 * File:   Exceptions.h
 * Author: Mike Goss <mikegoss@cs.du.edu>
 *
 * Created on June 29, 2017, 10:00 AM
 * 
 */

#ifndef MEM_EXCEPTIONS_H
#define MEM_EXCEPTIONS_H

#include "PhysicalMemory.h"
#include <stdexcept>
#include <string>

namespace mem {

/**
 * MemorySubsystemException
 * 
 * Abstract parent class for all exceptions generated by MemorySubsystem.
 * This allows a catch clause to specify this class to catch all child
 * exceptions.
 */
class MemorySubsystemException : public std::exception {
public:
  /**
   * Copy constructor (required for throw/catch)
   */
  MemorySubsystemException(const MemorySubsystemException &other);

  /**
   * Move constructor (required for throw/catch)
   * @param other exception to move from
   */
  MemorySubsystemException(MemorySubsystemException &&other);

  /**
   * Destructor
   */
  ~MemorySubsystemException() {
  }

  /**
   * what - return description string for exception. Description returned is
   *        a const C string.
   * 
   * @return description
   */
  const char *what() const noexcept override {
    return description.c_str();
  }

protected:

  /**
   * Default constructor - constructors are protected to disallow construction
   *   of base class independently of derived class.
   */
  MemorySubsystemException() {
  }

  /**
   * Constructor specifying description
   * 
   * @param description_ string describing the exception.
   */
  MemorySubsystemException(const std::string &description_) {
    description = description_;
  }

  /**
   * SetDescription - set description string for exception.
   * 
   * @param description_ string describing the exception.
   */
  void SetDescription(const std::string &description_) {
    description = description_;
  };

private:
  std::string description;
};

/******************************************************************************/

/**
 * Exception for access outside bounds of physical memory
 */
class PhysicalMemoryBoundsException : public MemorySubsystemException {
public:
  /**
   * Constructor
   * 
   * @param address of invalid access
   */
  PhysicalMemoryBoundsException(Addr address);
};

/******************************************************************************/

/**
 * Exception for access to page marked as not present
 */
class PageFaultException : public MemorySubsystemException {
public:
  /**
   * Constructor (address info is in PMCB)
   */
  PageFaultException(void) {}
};

/******************************************************************************/

/**
 * Exception for write to page not marked writable
 */
class WritePermissionFaultException : public MemorySubsystemException {
public:
  /**
   * Constructor (address info is in PMCB)
   */
  WritePermissionFaultException(void) {}
  
  /**
   * Constructor with description
   */
  WritePermissionFaultException(const std::string &description_) {
    SetDescription(description_);
  }
};

/**
 * InvalidMMUOperationException - usually caused by an error in the program
 *   calling the MMU.
 */
class InvalidMMUOperationException : public MemorySubsystemException {
public:
  /**
   * Constructor
   */
  InvalidMMUOperationException(void) {}
  
  /**
   * Constructor with description
   */
  InvalidMMUOperationException(const std::string &description_) {
    SetDescription(description_);
  }
};

} // namespace mem

#endif /* MEM_EXCEPTIONS_H */